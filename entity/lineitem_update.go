// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dsha256/feesapi/entity/bill"
	"github.com/dsha256/feesapi/entity/lineitem"
	"github.com/dsha256/feesapi/entity/predicate"
	"github.com/google/uuid"
)

// LineItemUpdate is the builder for updating LineItem entities.
type LineItemUpdate struct {
	config
	hooks    []Hook
	mutation *LineItemMutation
}

// Where appends a list predicates to the LineItemUpdate builder.
func (liu *LineItemUpdate) Where(ps ...predicate.LineItem) *LineItemUpdate {
	liu.mutation.Where(ps...)
	return liu
}

// SetName sets the "name" field.
func (liu *LineItemUpdate) SetName(s string) *LineItemUpdate {
	liu.mutation.SetName(s)
	return liu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (liu *LineItemUpdate) SetNillableName(s *string) *LineItemUpdate {
	if s != nil {
		liu.SetName(*s)
	}
	return liu
}

// SetPrice sets the "price" field.
func (liu *LineItemUpdate) SetPrice(i int64) *LineItemUpdate {
	liu.mutation.ResetPrice()
	liu.mutation.SetPrice(i)
	return liu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (liu *LineItemUpdate) SetNillablePrice(i *int64) *LineItemUpdate {
	if i != nil {
		liu.SetPrice(*i)
	}
	return liu
}

// AddPrice adds i to the "price" field.
func (liu *LineItemUpdate) AddPrice(i int64) *LineItemUpdate {
	liu.mutation.AddPrice(i)
	return liu
}

// SetQuantity sets the "quantity" field.
func (liu *LineItemUpdate) SetQuantity(i int64) *LineItemUpdate {
	liu.mutation.ResetQuantity()
	liu.mutation.SetQuantity(i)
	return liu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (liu *LineItemUpdate) SetNillableQuantity(i *int64) *LineItemUpdate {
	if i != nil {
		liu.SetQuantity(*i)
	}
	return liu
}

// AddQuantity adds i to the "quantity" field.
func (liu *LineItemUpdate) AddQuantity(i int64) *LineItemUpdate {
	liu.mutation.AddQuantity(i)
	return liu
}

// SetAddedAt sets the "added_at" field.
func (liu *LineItemUpdate) SetAddedAt(t time.Time) *LineItemUpdate {
	liu.mutation.SetAddedAt(t)
	return liu
}

// SetNillableAddedAt sets the "added_at" field if the given value is not nil.
func (liu *LineItemUpdate) SetNillableAddedAt(t *time.Time) *LineItemUpdate {
	if t != nil {
		liu.SetAddedAt(*t)
	}
	return liu
}

// SetOwnerID sets the "owner" edge to the Bill entity by ID.
func (liu *LineItemUpdate) SetOwnerID(id uuid.UUID) *LineItemUpdate {
	liu.mutation.SetOwnerID(id)
	return liu
}

// SetNillableOwnerID sets the "owner" edge to the Bill entity by ID if the given value is not nil.
func (liu *LineItemUpdate) SetNillableOwnerID(id *uuid.UUID) *LineItemUpdate {
	if id != nil {
		liu = liu.SetOwnerID(*id)
	}
	return liu
}

// SetOwner sets the "owner" edge to the Bill entity.
func (liu *LineItemUpdate) SetOwner(b *Bill) *LineItemUpdate {
	return liu.SetOwnerID(b.ID)
}

// Mutation returns the LineItemMutation object of the builder.
func (liu *LineItemUpdate) Mutation() *LineItemMutation {
	return liu.mutation
}

// ClearOwner clears the "owner" edge to the Bill entity.
func (liu *LineItemUpdate) ClearOwner() *LineItemUpdate {
	liu.mutation.ClearOwner()
	return liu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (liu *LineItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, liu.sqlSave, liu.mutation, liu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (liu *LineItemUpdate) SaveX(ctx context.Context) int {
	affected, err := liu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (liu *LineItemUpdate) Exec(ctx context.Context) error {
	_, err := liu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (liu *LineItemUpdate) ExecX(ctx context.Context) {
	if err := liu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (liu *LineItemUpdate) check() error {
	if v, ok := liu.mutation.Name(); ok {
		if err := lineitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entity: validator failed for field "LineItem.name": %w`, err)}
		}
	}
	if v, ok := liu.mutation.Price(); ok {
		if err := lineitem.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`entity: validator failed for field "LineItem.price": %w`, err)}
		}
	}
	if v, ok := liu.mutation.Quantity(); ok {
		if err := lineitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`entity: validator failed for field "LineItem.quantity": %w`, err)}
		}
	}
	return nil
}

func (liu *LineItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := liu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lineitem.Table, lineitem.Columns, sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID))
	if ps := liu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := liu.mutation.Name(); ok {
		_spec.SetField(lineitem.FieldName, field.TypeString, value)
	}
	if value, ok := liu.mutation.Price(); ok {
		_spec.SetField(lineitem.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := liu.mutation.AddedPrice(); ok {
		_spec.AddField(lineitem.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := liu.mutation.Quantity(); ok {
		_spec.SetField(lineitem.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := liu.mutation.AddedQuantity(); ok {
		_spec.AddField(lineitem.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := liu.mutation.AddedAt(); ok {
		_spec.SetField(lineitem.FieldAddedAt, field.TypeTime, value)
	}
	if liu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lineitem.OwnerTable,
			Columns: []string{lineitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := liu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lineitem.OwnerTable,
			Columns: []string{lineitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, liu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	liu.mutation.done = true
	return n, nil
}

// LineItemUpdateOne is the builder for updating a single LineItem entity.
type LineItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LineItemMutation
}

// SetName sets the "name" field.
func (liuo *LineItemUpdateOne) SetName(s string) *LineItemUpdateOne {
	liuo.mutation.SetName(s)
	return liuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (liuo *LineItemUpdateOne) SetNillableName(s *string) *LineItemUpdateOne {
	if s != nil {
		liuo.SetName(*s)
	}
	return liuo
}

// SetPrice sets the "price" field.
func (liuo *LineItemUpdateOne) SetPrice(i int64) *LineItemUpdateOne {
	liuo.mutation.ResetPrice()
	liuo.mutation.SetPrice(i)
	return liuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (liuo *LineItemUpdateOne) SetNillablePrice(i *int64) *LineItemUpdateOne {
	if i != nil {
		liuo.SetPrice(*i)
	}
	return liuo
}

// AddPrice adds i to the "price" field.
func (liuo *LineItemUpdateOne) AddPrice(i int64) *LineItemUpdateOne {
	liuo.mutation.AddPrice(i)
	return liuo
}

// SetQuantity sets the "quantity" field.
func (liuo *LineItemUpdateOne) SetQuantity(i int64) *LineItemUpdateOne {
	liuo.mutation.ResetQuantity()
	liuo.mutation.SetQuantity(i)
	return liuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (liuo *LineItemUpdateOne) SetNillableQuantity(i *int64) *LineItemUpdateOne {
	if i != nil {
		liuo.SetQuantity(*i)
	}
	return liuo
}

// AddQuantity adds i to the "quantity" field.
func (liuo *LineItemUpdateOne) AddQuantity(i int64) *LineItemUpdateOne {
	liuo.mutation.AddQuantity(i)
	return liuo
}

// SetAddedAt sets the "added_at" field.
func (liuo *LineItemUpdateOne) SetAddedAt(t time.Time) *LineItemUpdateOne {
	liuo.mutation.SetAddedAt(t)
	return liuo
}

// SetNillableAddedAt sets the "added_at" field if the given value is not nil.
func (liuo *LineItemUpdateOne) SetNillableAddedAt(t *time.Time) *LineItemUpdateOne {
	if t != nil {
		liuo.SetAddedAt(*t)
	}
	return liuo
}

// SetOwnerID sets the "owner" edge to the Bill entity by ID.
func (liuo *LineItemUpdateOne) SetOwnerID(id uuid.UUID) *LineItemUpdateOne {
	liuo.mutation.SetOwnerID(id)
	return liuo
}

// SetNillableOwnerID sets the "owner" edge to the Bill entity by ID if the given value is not nil.
func (liuo *LineItemUpdateOne) SetNillableOwnerID(id *uuid.UUID) *LineItemUpdateOne {
	if id != nil {
		liuo = liuo.SetOwnerID(*id)
	}
	return liuo
}

// SetOwner sets the "owner" edge to the Bill entity.
func (liuo *LineItemUpdateOne) SetOwner(b *Bill) *LineItemUpdateOne {
	return liuo.SetOwnerID(b.ID)
}

// Mutation returns the LineItemMutation object of the builder.
func (liuo *LineItemUpdateOne) Mutation() *LineItemMutation {
	return liuo.mutation
}

// ClearOwner clears the "owner" edge to the Bill entity.
func (liuo *LineItemUpdateOne) ClearOwner() *LineItemUpdateOne {
	liuo.mutation.ClearOwner()
	return liuo
}

// Where appends a list predicates to the LineItemUpdate builder.
func (liuo *LineItemUpdateOne) Where(ps ...predicate.LineItem) *LineItemUpdateOne {
	liuo.mutation.Where(ps...)
	return liuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (liuo *LineItemUpdateOne) Select(field string, fields ...string) *LineItemUpdateOne {
	liuo.fields = append([]string{field}, fields...)
	return liuo
}

// Save executes the query and returns the updated LineItem entity.
func (liuo *LineItemUpdateOne) Save(ctx context.Context) (*LineItem, error) {
	return withHooks(ctx, liuo.sqlSave, liuo.mutation, liuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (liuo *LineItemUpdateOne) SaveX(ctx context.Context) *LineItem {
	node, err := liuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (liuo *LineItemUpdateOne) Exec(ctx context.Context) error {
	_, err := liuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (liuo *LineItemUpdateOne) ExecX(ctx context.Context) {
	if err := liuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (liuo *LineItemUpdateOne) check() error {
	if v, ok := liuo.mutation.Name(); ok {
		if err := lineitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entity: validator failed for field "LineItem.name": %w`, err)}
		}
	}
	if v, ok := liuo.mutation.Price(); ok {
		if err := lineitem.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`entity: validator failed for field "LineItem.price": %w`, err)}
		}
	}
	if v, ok := liuo.mutation.Quantity(); ok {
		if err := lineitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`entity: validator failed for field "LineItem.quantity": %w`, err)}
		}
	}
	return nil
}

func (liuo *LineItemUpdateOne) sqlSave(ctx context.Context) (_node *LineItem, err error) {
	if err := liuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lineitem.Table, lineitem.Columns, sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID))
	id, ok := liuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entity: missing "LineItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := liuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lineitem.FieldID)
		for _, f := range fields {
			if !lineitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entity: invalid field %q for query", f)}
			}
			if f != lineitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := liuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := liuo.mutation.Name(); ok {
		_spec.SetField(lineitem.FieldName, field.TypeString, value)
	}
	if value, ok := liuo.mutation.Price(); ok {
		_spec.SetField(lineitem.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := liuo.mutation.AddedPrice(); ok {
		_spec.AddField(lineitem.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := liuo.mutation.Quantity(); ok {
		_spec.SetField(lineitem.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := liuo.mutation.AddedQuantity(); ok {
		_spec.AddField(lineitem.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := liuo.mutation.AddedAt(); ok {
		_spec.SetField(lineitem.FieldAddedAt, field.TypeTime, value)
	}
	if liuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lineitem.OwnerTable,
			Columns: []string{lineitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := liuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lineitem.OwnerTable,
			Columns: []string{lineitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LineItem{config: liuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, liuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	liuo.mutation.done = true
	return _node, nil
}
