// Code generated by ent, DO NOT EDIT.

package bill

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bill type in the database.
	Label = "bill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldIsOpen holds the string denoting the is_open field in the database.
	FieldIsOpen = "is_open"
	// FieldClosedAt holds the string denoting the closed_at field in the database.
	FieldClosedAt = "closed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeLineItems holds the string denoting the line_items edge name in mutations.
	EdgeLineItems = "line_items"
	// Table holds the table name of the bill in the database.
	Table = "bills"
	// LineItemsTable is the table that holds the line_items relation/edge.
	LineItemsTable = "line_items"
	// LineItemsInverseTable is the table name for the LineItem entity.
	// It exists in this package in order to avoid circular dependency with the "lineitem" package.
	LineItemsInverseTable = "line_items"
	// LineItemsColumn is the table column denoting the line_items relation/edge.
	LineItemsColumn = "bill_line_items"
)

// Columns holds all SQL columns for bill fields.
var Columns = []string{
	FieldID,
	FieldCurrency,
	FieldTotal,
	FieldIsOpen,
	FieldClosedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTotal holds the default value on creation for the "total" field.
	DefaultTotal int64
	// DefaultIsOpen holds the default value on creation for the "is_open" field.
	DefaultIsOpen bool
	// DefaultClosedAt holds the default value on creation for the "closed_at" field.
	DefaultClosedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Currency defines the type for the "currency" enum field.
type Currency string

// CurrencyUSD is the default value of the Currency enum.
const DefaultCurrency = CurrencyUSD

// Currency values.
const (
	CurrencyUSD Currency = "USD"
)

func (c Currency) String() string {
	return string(c)
}

// CurrencyValidator is a validator for the "currency" field enum values. It is called by the builders before save.
func CurrencyValidator(c Currency) error {
	switch c {
	case CurrencyUSD:
		return nil
	default:
		return fmt.Errorf("bill: invalid enum value for currency field: %q", c)
	}
}

// OrderOption defines the ordering options for the Bill queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByIsOpen orders the results by the is_open field.
func ByIsOpen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsOpen, opts...).ToFunc()
}

// ByClosedAt orders the results by the closed_at field.
func ByClosedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLineItemsCount orders the results by line_items count.
func ByLineItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLineItemsStep(), opts...)
	}
}

// ByLineItems orders the results by line_items terms.
func ByLineItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLineItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLineItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LineItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LineItemsTable, LineItemsColumn),
	)
}
