// Code generated by ent, DO NOT EDIT.

package bill

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dsha256/feesapi/entity/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Bill {
	return predicate.Bill(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Bill {
	return predicate.Bill(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Bill {
	return predicate.Bill(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Bill {
	return predicate.Bill(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Bill {
	return predicate.Bill(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Bill {
	return predicate.Bill(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Bill {
	return predicate.Bill(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Bill {
	return predicate.Bill(sql.FieldContainsFold(FieldID, id))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v int64) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldTotal, v))
}

// IsOpen applies equality check predicate on the "is_open" field. It's identical to IsOpenEQ.
func IsOpen(v bool) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldIsOpen, v))
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldClosedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldCreatedAt, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v Currency) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v Currency) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...Currency) predicate.Bill {
	return predicate.Bill(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...Currency) predicate.Bill {
	return predicate.Bill(sql.FieldNotIn(FieldCurrency, vs...))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v int64) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v int64) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...int64) predicate.Bill {
	return predicate.Bill(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...int64) predicate.Bill {
	return predicate.Bill(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v int64) predicate.Bill {
	return predicate.Bill(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v int64) predicate.Bill {
	return predicate.Bill(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v int64) predicate.Bill {
	return predicate.Bill(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v int64) predicate.Bill {
	return predicate.Bill(sql.FieldLTE(FieldTotal, v))
}

// IsOpenEQ applies the EQ predicate on the "is_open" field.
func IsOpenEQ(v bool) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldIsOpen, v))
}

// IsOpenNEQ applies the NEQ predicate on the "is_open" field.
func IsOpenNEQ(v bool) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldIsOpen, v))
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldClosedAt, v))
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldClosedAt, v))
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldIn(FieldClosedAt, vs...))
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldNotIn(FieldClosedAt, vs...))
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldGT(FieldClosedAt, v))
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldGTE(FieldClosedAt, v))
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldLT(FieldClosedAt, v))
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldLTE(FieldClosedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bill {
	return predicate.Bill(sql.FieldLTE(FieldCreatedAt, v))
}

// HasLineItems applies the HasEdge predicate on the "line_items" edge.
func HasLineItems() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LineItemsTable, LineItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLineItemsWith applies the HasEdge predicate on the "line_items" edge with a given conditions (other predicates).
func HasLineItemsWith(preds ...predicate.LineItem) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := newLineItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bill) predicate.Bill {
	return predicate.Bill(sql.NotPredicates(p))
}
