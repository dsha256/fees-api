// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dsha256/feesapi/entity/bill"
	"github.com/dsha256/feesapi/entity/lineitem"
	"github.com/dsha256/feesapi/entity/predicate"
	"github.com/google/uuid"
)

// BillUpdate is the builder for updating Bill entities.
type BillUpdate struct {
	config
	hooks    []Hook
	mutation *BillMutation
}

// Where appends a list predicates to the BillUpdate builder.
func (bu *BillUpdate) Where(ps ...predicate.Bill) *BillUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetCurrency sets the "currency" field.
func (bu *BillUpdate) SetCurrency(b bill.Currency) *BillUpdate {
	bu.mutation.SetCurrency(b)
	return bu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (bu *BillUpdate) SetNillableCurrency(b *bill.Currency) *BillUpdate {
	if b != nil {
		bu.SetCurrency(*b)
	}
	return bu
}

// SetTotal sets the "total" field.
func (bu *BillUpdate) SetTotal(i int64) *BillUpdate {
	bu.mutation.ResetTotal()
	bu.mutation.SetTotal(i)
	return bu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (bu *BillUpdate) SetNillableTotal(i *int64) *BillUpdate {
	if i != nil {
		bu.SetTotal(*i)
	}
	return bu
}

// AddTotal adds i to the "total" field.
func (bu *BillUpdate) AddTotal(i int64) *BillUpdate {
	bu.mutation.AddTotal(i)
	return bu
}

// SetIsOpen sets the "is_open" field.
func (bu *BillUpdate) SetIsOpen(b bool) *BillUpdate {
	bu.mutation.SetIsOpen(b)
	return bu
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (bu *BillUpdate) SetNillableIsOpen(b *bool) *BillUpdate {
	if b != nil {
		bu.SetIsOpen(*b)
	}
	return bu
}

// SetClosedAt sets the "closed_at" field.
func (bu *BillUpdate) SetClosedAt(t time.Time) *BillUpdate {
	bu.mutation.SetClosedAt(t)
	return bu
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (bu *BillUpdate) SetNillableClosedAt(t *time.Time) *BillUpdate {
	if t != nil {
		bu.SetClosedAt(*t)
	}
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BillUpdate) SetCreatedAt(t time.Time) *BillUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BillUpdate) SetNillableCreatedAt(t *time.Time) *BillUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// AddLineItemIDs adds the "line_items" edge to the LineItem entity by IDs.
func (bu *BillUpdate) AddLineItemIDs(ids ...uuid.UUID) *BillUpdate {
	bu.mutation.AddLineItemIDs(ids...)
	return bu
}

// AddLineItems adds the "line_items" edges to the LineItem entity.
func (bu *BillUpdate) AddLineItems(l ...*LineItem) *BillUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return bu.AddLineItemIDs(ids...)
}

// Mutation returns the BillMutation object of the builder.
func (bu *BillUpdate) Mutation() *BillMutation {
	return bu.mutation
}

// ClearLineItems clears all "line_items" edges to the LineItem entity.
func (bu *BillUpdate) ClearLineItems() *BillUpdate {
	bu.mutation.ClearLineItems()
	return bu
}

// RemoveLineItemIDs removes the "line_items" edge to LineItem entities by IDs.
func (bu *BillUpdate) RemoveLineItemIDs(ids ...uuid.UUID) *BillUpdate {
	bu.mutation.RemoveLineItemIDs(ids...)
	return bu
}

// RemoveLineItems removes "line_items" edges to LineItem entities.
func (bu *BillUpdate) RemoveLineItems(l ...*LineItem) *BillUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return bu.RemoveLineItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BillUpdate) check() error {
	if v, ok := bu.mutation.Currency(); ok {
		if err := bill.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`entity: validator failed for field "Bill.currency": %w`, err)}
		}
	}
	return nil
}

func (bu *BillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeString))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Currency(); ok {
		_spec.SetField(bill.FieldCurrency, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.Total(); ok {
		_spec.SetField(bill.FieldTotal, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedTotal(); ok {
		_spec.AddField(bill.FieldTotal, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.IsOpen(); ok {
		_spec.SetField(bill.FieldIsOpen, field.TypeBool, value)
	}
	if value, ok := bu.mutation.ClosedAt(); ok {
		_spec.SetField(bill.FieldClosedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(bill.FieldCreatedAt, field.TypeTime, value)
	}
	if bu.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bill.LineItemsTable,
			Columns: []string{bill.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedLineItemsIDs(); len(nodes) > 0 && !bu.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bill.LineItemsTable,
			Columns: []string{bill.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bill.LineItemsTable,
			Columns: []string{bill.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BillUpdateOne is the builder for updating a single Bill entity.
type BillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillMutation
}

// SetCurrency sets the "currency" field.
func (buo *BillUpdateOne) SetCurrency(b bill.Currency) *BillUpdateOne {
	buo.mutation.SetCurrency(b)
	return buo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableCurrency(b *bill.Currency) *BillUpdateOne {
	if b != nil {
		buo.SetCurrency(*b)
	}
	return buo
}

// SetTotal sets the "total" field.
func (buo *BillUpdateOne) SetTotal(i int64) *BillUpdateOne {
	buo.mutation.ResetTotal()
	buo.mutation.SetTotal(i)
	return buo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableTotal(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetTotal(*i)
	}
	return buo
}

// AddTotal adds i to the "total" field.
func (buo *BillUpdateOne) AddTotal(i int64) *BillUpdateOne {
	buo.mutation.AddTotal(i)
	return buo
}

// SetIsOpen sets the "is_open" field.
func (buo *BillUpdateOne) SetIsOpen(b bool) *BillUpdateOne {
	buo.mutation.SetIsOpen(b)
	return buo
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableIsOpen(b *bool) *BillUpdateOne {
	if b != nil {
		buo.SetIsOpen(*b)
	}
	return buo
}

// SetClosedAt sets the "closed_at" field.
func (buo *BillUpdateOne) SetClosedAt(t time.Time) *BillUpdateOne {
	buo.mutation.SetClosedAt(t)
	return buo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableClosedAt(t *time.Time) *BillUpdateOne {
	if t != nil {
		buo.SetClosedAt(*t)
	}
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BillUpdateOne) SetCreatedAt(t time.Time) *BillUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableCreatedAt(t *time.Time) *BillUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// AddLineItemIDs adds the "line_items" edge to the LineItem entity by IDs.
func (buo *BillUpdateOne) AddLineItemIDs(ids ...uuid.UUID) *BillUpdateOne {
	buo.mutation.AddLineItemIDs(ids...)
	return buo
}

// AddLineItems adds the "line_items" edges to the LineItem entity.
func (buo *BillUpdateOne) AddLineItems(l ...*LineItem) *BillUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return buo.AddLineItemIDs(ids...)
}

// Mutation returns the BillMutation object of the builder.
func (buo *BillUpdateOne) Mutation() *BillMutation {
	return buo.mutation
}

// ClearLineItems clears all "line_items" edges to the LineItem entity.
func (buo *BillUpdateOne) ClearLineItems() *BillUpdateOne {
	buo.mutation.ClearLineItems()
	return buo
}

// RemoveLineItemIDs removes the "line_items" edge to LineItem entities by IDs.
func (buo *BillUpdateOne) RemoveLineItemIDs(ids ...uuid.UUID) *BillUpdateOne {
	buo.mutation.RemoveLineItemIDs(ids...)
	return buo
}

// RemoveLineItems removes "line_items" edges to LineItem entities.
func (buo *BillUpdateOne) RemoveLineItems(l ...*LineItem) *BillUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return buo.RemoveLineItemIDs(ids...)
}

// Where appends a list predicates to the BillUpdate builder.
func (buo *BillUpdateOne) Where(ps ...predicate.Bill) *BillUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BillUpdateOne) Select(field string, fields ...string) *BillUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bill entity.
func (buo *BillUpdateOne) Save(ctx context.Context) (*Bill, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillUpdateOne) SaveX(ctx context.Context) *Bill {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BillUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BillUpdateOne) check() error {
	if v, ok := buo.mutation.Currency(); ok {
		if err := bill.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`entity: validator failed for field "Bill.currency": %w`, err)}
		}
	}
	return nil
}

func (buo *BillUpdateOne) sqlSave(ctx context.Context) (_node *Bill, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeString))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entity: missing "Bill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bill.FieldID)
		for _, f := range fields {
			if !bill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entity: invalid field %q for query", f)}
			}
			if f != bill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Currency(); ok {
		_spec.SetField(bill.FieldCurrency, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.Total(); ok {
		_spec.SetField(bill.FieldTotal, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedTotal(); ok {
		_spec.AddField(bill.FieldTotal, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.IsOpen(); ok {
		_spec.SetField(bill.FieldIsOpen, field.TypeBool, value)
	}
	if value, ok := buo.mutation.ClosedAt(); ok {
		_spec.SetField(bill.FieldClosedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(bill.FieldCreatedAt, field.TypeTime, value)
	}
	if buo.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bill.LineItemsTable,
			Columns: []string{bill.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedLineItemsIDs(); len(nodes) > 0 && !buo.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bill.LineItemsTable,
			Columns: []string{bill.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bill.LineItemsTable,
			Columns: []string{bill.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bill{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
