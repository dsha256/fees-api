// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dsha256/feesapi/entity/lineitem"
	"github.com/dsha256/feesapi/entity/predicate"
)

// LineItemDelete is the builder for deleting a LineItem entity.
type LineItemDelete struct {
	config
	hooks    []Hook
	mutation *LineItemMutation
}

// Where appends a list predicates to the LineItemDelete builder.
func (lid *LineItemDelete) Where(ps ...predicate.LineItem) *LineItemDelete {
	lid.mutation.Where(ps...)
	return lid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lid *LineItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lid.sqlExec, lid.mutation, lid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lid *LineItemDelete) ExecX(ctx context.Context) int {
	n, err := lid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lid *LineItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lineitem.Table, sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID))
	if ps := lid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lid.mutation.done = true
	return affected, err
}

// LineItemDeleteOne is the builder for deleting a single LineItem entity.
type LineItemDeleteOne struct {
	lid *LineItemDelete
}

// Where appends a list predicates to the LineItemDelete builder.
func (lido *LineItemDeleteOne) Where(ps ...predicate.LineItem) *LineItemDeleteOne {
	lido.lid.mutation.Where(ps...)
	return lido
}

// Exec executes the deletion query.
func (lido *LineItemDeleteOne) Exec(ctx context.Context) error {
	n, err := lido.lid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lineitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lido *LineItemDeleteOne) ExecX(ctx context.Context) {
	if err := lido.Exec(ctx); err != nil {
		panic(err)
	}
}
