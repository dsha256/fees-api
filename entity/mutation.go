// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dsha256/feesapi/entity/bill"
	"github.com/dsha256/feesapi/entity/lineitem"
	"github.com/dsha256/feesapi/entity/predicate"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBill     = "Bill"
	TypeLineItem = "LineItem"
)

// BillMutation represents an operation that mutates the Bill nodes in the graph.
type BillMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	currency          *bill.Currency
	total             *int64
	addtotal          *int64
	is_open           *bool
	closed_at         *time.Time
	created_at        *time.Time
	clearedFields     map[string]struct{}
	line_items        map[uuid.UUID]struct{}
	removedline_items map[uuid.UUID]struct{}
	clearedline_items bool
	done              bool
	oldValue          func(context.Context) (*Bill, error)
	predicates        []predicate.Bill
}

var _ ent.Mutation = (*BillMutation)(nil)

// billOption allows management of the mutation configuration using functional options.
type billOption func(*BillMutation)

// newBillMutation creates new mutation for the Bill entity.
func newBillMutation(c config, op Op, opts ...billOption) *BillMutation {
	m := &BillMutation{
		config:        c,
		op:            op,
		typ:           TypeBill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBillID sets the ID field of the mutation.
func withBillID(id uuid.UUID) billOption {
	return func(m *BillMutation) {
		var (
			err   error
			once  sync.Once
			value *Bill
		)
		m.oldValue = func(ctx context.Context) (*Bill, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBill sets the old Bill of the mutation.
func withBill(node *Bill) billOption {
	return func(m *BillMutation) {
		m.oldValue = func(context.Context) (*Bill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Bill entities.
func (m *BillMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BillMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BillMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bill.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCurrency sets the "currency" field.
func (m *BillMutation) SetCurrency(b bill.Currency) {
	m.currency = &b
}

// Currency returns the value of the "currency" field in the mutation.
func (m *BillMutation) Currency() (r bill.Currency, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldCurrency(ctx context.Context) (v bill.Currency, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *BillMutation) ResetCurrency() {
	m.currency = nil
}

// SetTotal sets the "total" field.
func (m *BillMutation) SetTotal(i int64) {
	m.total = &i
	m.addtotal = nil
}

// Total returns the value of the "total" field in the mutation.
func (m *BillMutation) Total() (r int64, exists bool) {
	v := m.total
	if v == nil {
		return
	}
	return *v, true
}

// OldTotal returns the old "total" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldTotal(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotal: %w", err)
	}
	return oldValue.Total, nil
}

// AddTotal adds i to the "total" field.
func (m *BillMutation) AddTotal(i int64) {
	if m.addtotal != nil {
		*m.addtotal += i
	} else {
		m.addtotal = &i
	}
}

// AddedTotal returns the value that was added to the "total" field in this mutation.
func (m *BillMutation) AddedTotal() (r int64, exists bool) {
	v := m.addtotal
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotal resets all changes to the "total" field.
func (m *BillMutation) ResetTotal() {
	m.total = nil
	m.addtotal = nil
}

// SetIsOpen sets the "is_open" field.
func (m *BillMutation) SetIsOpen(b bool) {
	m.is_open = &b
}

// IsOpen returns the value of the "is_open" field in the mutation.
func (m *BillMutation) IsOpen() (r bool, exists bool) {
	v := m.is_open
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOpen returns the old "is_open" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldIsOpen(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsOpen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsOpen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOpen: %w", err)
	}
	return oldValue.IsOpen, nil
}

// ResetIsOpen resets all changes to the "is_open" field.
func (m *BillMutation) ResetIsOpen() {
	m.is_open = nil
}

// SetClosedAt sets the "closed_at" field.
func (m *BillMutation) SetClosedAt(t time.Time) {
	m.closed_at = &t
}

// ClosedAt returns the value of the "closed_at" field in the mutation.
func (m *BillMutation) ClosedAt() (r time.Time, exists bool) {
	v := m.closed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldClosedAt returns the old "closed_at" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldClosedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClosedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClosedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClosedAt: %w", err)
	}
	return oldValue.ClosedAt, nil
}

// ResetClosedAt resets all changes to the "closed_at" field.
func (m *BillMutation) ResetClosedAt() {
	m.closed_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BillMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BillMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BillMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddLineItemIDs adds the "line_items" edge to the LineItem entity by ids.
func (m *BillMutation) AddLineItemIDs(ids ...uuid.UUID) {
	if m.line_items == nil {
		m.line_items = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.line_items[ids[i]] = struct{}{}
	}
}

// ClearLineItems clears the "line_items" edge to the LineItem entity.
func (m *BillMutation) ClearLineItems() {
	m.clearedline_items = true
}

// LineItemsCleared reports if the "line_items" edge to the LineItem entity was cleared.
func (m *BillMutation) LineItemsCleared() bool {
	return m.clearedline_items
}

// RemoveLineItemIDs removes the "line_items" edge to the LineItem entity by IDs.
func (m *BillMutation) RemoveLineItemIDs(ids ...uuid.UUID) {
	if m.removedline_items == nil {
		m.removedline_items = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.line_items, ids[i])
		m.removedline_items[ids[i]] = struct{}{}
	}
}

// RemovedLineItems returns the removed IDs of the "line_items" edge to the LineItem entity.
func (m *BillMutation) RemovedLineItemsIDs() (ids []uuid.UUID) {
	for id := range m.removedline_items {
		ids = append(ids, id)
	}
	return
}

// LineItemsIDs returns the "line_items" edge IDs in the mutation.
func (m *BillMutation) LineItemsIDs() (ids []uuid.UUID) {
	for id := range m.line_items {
		ids = append(ids, id)
	}
	return
}

// ResetLineItems resets all changes to the "line_items" edge.
func (m *BillMutation) ResetLineItems() {
	m.line_items = nil
	m.clearedline_items = false
	m.removedline_items = nil
}

// Where appends a list predicates to the BillMutation builder.
func (m *BillMutation) Where(ps ...predicate.Bill) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BillMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BillMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bill, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BillMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BillMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bill).
func (m *BillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BillMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.currency != nil {
		fields = append(fields, bill.FieldCurrency)
	}
	if m.total != nil {
		fields = append(fields, bill.FieldTotal)
	}
	if m.is_open != nil {
		fields = append(fields, bill.FieldIsOpen)
	}
	if m.closed_at != nil {
		fields = append(fields, bill.FieldClosedAt)
	}
	if m.created_at != nil {
		fields = append(fields, bill.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bill.FieldCurrency:
		return m.Currency()
	case bill.FieldTotal:
		return m.Total()
	case bill.FieldIsOpen:
		return m.IsOpen()
	case bill.FieldClosedAt:
		return m.ClosedAt()
	case bill.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bill.FieldCurrency:
		return m.OldCurrency(ctx)
	case bill.FieldTotal:
		return m.OldTotal(ctx)
	case bill.FieldIsOpen:
		return m.OldIsOpen(ctx)
	case bill.FieldClosedAt:
		return m.OldClosedAt(ctx)
	case bill.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Bill field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bill.FieldCurrency:
		v, ok := value.(bill.Currency)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case bill.FieldTotal:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotal(v)
		return nil
	case bill.FieldIsOpen:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOpen(v)
		return nil
	case bill.FieldClosedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClosedAt(v)
		return nil
	case bill.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Bill field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BillMutation) AddedFields() []string {
	var fields []string
	if m.addtotal != nil {
		fields = append(fields, bill.FieldTotal)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BillMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bill.FieldTotal:
		return m.AddedTotal()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BillMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bill.FieldTotal:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotal(v)
		return nil
	}
	return fmt.Errorf("unknown Bill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BillMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BillMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bill nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BillMutation) ResetField(name string) error {
	switch name {
	case bill.FieldCurrency:
		m.ResetCurrency()
		return nil
	case bill.FieldTotal:
		m.ResetTotal()
		return nil
	case bill.FieldIsOpen:
		m.ResetIsOpen()
		return nil
	case bill.FieldClosedAt:
		m.ResetClosedAt()
		return nil
	case bill.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Bill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BillMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.line_items != nil {
		edges = append(edges, bill.EdgeLineItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BillMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bill.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.line_items))
		for id := range m.line_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedline_items != nil {
		edges = append(edges, bill.EdgeLineItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BillMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bill.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.removedline_items))
		for id := range m.removedline_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedline_items {
		edges = append(edges, bill.EdgeLineItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BillMutation) EdgeCleared(name string) bool {
	switch name {
	case bill.EdgeLineItems:
		return m.clearedline_items
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BillMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Bill unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BillMutation) ResetEdge(name string) error {
	switch name {
	case bill.EdgeLineItems:
		m.ResetLineItems()
		return nil
	}
	return fmt.Errorf("unknown Bill edge %s", name)
}

// LineItemMutation represents an operation that mutates the LineItem nodes in the graph.
type LineItemMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	price         *int64
	addprice      *int64
	quantity      *int64
	addquantity   *int64
	added_at      *time.Time
	clearedFields map[string]struct{}
	owner         *uuid.UUID
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*LineItem, error)
	predicates    []predicate.LineItem
}

var _ ent.Mutation = (*LineItemMutation)(nil)

// lineitemOption allows management of the mutation configuration using functional options.
type lineitemOption func(*LineItemMutation)

// newLineItemMutation creates new mutation for the LineItem entity.
func newLineItemMutation(c config, op Op, opts ...lineitemOption) *LineItemMutation {
	m := &LineItemMutation{
		config:        c,
		op:            op,
		typ:           TypeLineItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLineItemID sets the ID field of the mutation.
func withLineItemID(id uuid.UUID) lineitemOption {
	return func(m *LineItemMutation) {
		var (
			err   error
			once  sync.Once
			value *LineItem
		)
		m.oldValue = func(ctx context.Context) (*LineItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LineItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLineItem sets the old LineItem of the mutation.
func withLineItem(node *LineItem) lineitemOption {
	return func(m *LineItemMutation) {
		m.oldValue = func(context.Context) (*LineItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LineItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LineItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LineItem entities.
func (m *LineItemMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LineItemMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LineItemMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LineItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *LineItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LineItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the LineItem entity.
// If the LineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LineItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LineItemMutation) ResetName() {
	m.name = nil
}

// SetPrice sets the "price" field.
func (m *LineItemMutation) SetPrice(i int64) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *LineItemMutation) Price() (r int64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the LineItem entity.
// If the LineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LineItemMutation) OldPrice(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *LineItemMutation) AddPrice(i int64) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *LineItemMutation) AddedPrice() (r int64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *LineItemMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetQuantity sets the "quantity" field.
func (m *LineItemMutation) SetQuantity(i int64) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *LineItemMutation) Quantity() (r int64, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the LineItem entity.
// If the LineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LineItemMutation) OldQuantity(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *LineItemMutation) AddQuantity(i int64) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *LineItemMutation) AddedQuantity() (r int64, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *LineItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetAddedAt sets the "added_at" field.
func (m *LineItemMutation) SetAddedAt(t time.Time) {
	m.added_at = &t
}

// AddedAt returns the value of the "added_at" field in the mutation.
func (m *LineItemMutation) AddedAt() (r time.Time, exists bool) {
	v := m.added_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedAt returns the old "added_at" field's value of the LineItem entity.
// If the LineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LineItemMutation) OldAddedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedAt: %w", err)
	}
	return oldValue.AddedAt, nil
}

// ResetAddedAt resets all changes to the "added_at" field.
func (m *LineItemMutation) ResetAddedAt() {
	m.added_at = nil
}

// SetOwnerID sets the "owner" edge to the Bill entity by id.
func (m *LineItemMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Bill entity.
func (m *LineItemMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Bill entity was cleared.
func (m *LineItemMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *LineItemMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *LineItemMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *LineItemMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the LineItemMutation builder.
func (m *LineItemMutation) Where(ps ...predicate.LineItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LineItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LineItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LineItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LineItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LineItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LineItem).
func (m *LineItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LineItemMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, lineitem.FieldName)
	}
	if m.price != nil {
		fields = append(fields, lineitem.FieldPrice)
	}
	if m.quantity != nil {
		fields = append(fields, lineitem.FieldQuantity)
	}
	if m.added_at != nil {
		fields = append(fields, lineitem.FieldAddedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LineItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lineitem.FieldName:
		return m.Name()
	case lineitem.FieldPrice:
		return m.Price()
	case lineitem.FieldQuantity:
		return m.Quantity()
	case lineitem.FieldAddedAt:
		return m.AddedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LineItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lineitem.FieldName:
		return m.OldName(ctx)
	case lineitem.FieldPrice:
		return m.OldPrice(ctx)
	case lineitem.FieldQuantity:
		return m.OldQuantity(ctx)
	case lineitem.FieldAddedAt:
		return m.OldAddedAt(ctx)
	}
	return nil, fmt.Errorf("unknown LineItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LineItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lineitem.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case lineitem.FieldPrice:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case lineitem.FieldQuantity:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case lineitem.FieldAddedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedAt(v)
		return nil
	}
	return fmt.Errorf("unknown LineItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LineItemMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, lineitem.FieldPrice)
	}
	if m.addquantity != nil {
		fields = append(fields, lineitem.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LineItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case lineitem.FieldPrice:
		return m.AddedPrice()
	case lineitem.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LineItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case lineitem.FieldPrice:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case lineitem.FieldQuantity:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown LineItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LineItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LineItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LineItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LineItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LineItemMutation) ResetField(name string) error {
	switch name {
	case lineitem.FieldName:
		m.ResetName()
		return nil
	case lineitem.FieldPrice:
		m.ResetPrice()
		return nil
	case lineitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	case lineitem.FieldAddedAt:
		m.ResetAddedAt()
		return nil
	}
	return fmt.Errorf("unknown LineItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LineItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, lineitem.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LineItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lineitem.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LineItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LineItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LineItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, lineitem.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LineItemMutation) EdgeCleared(name string) bool {
	switch name {
	case lineitem.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LineItemMutation) ClearEdge(name string) error {
	switch name {
	case lineitem.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown LineItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LineItemMutation) ResetEdge(name string) error {
	switch name {
	case lineitem.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown LineItem edge %s", name)
}
