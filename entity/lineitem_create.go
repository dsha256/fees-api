// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dsha256/feesapi/entity/bill"
	"github.com/dsha256/feesapi/entity/lineitem"
	"github.com/google/uuid"
)

// LineItemCreate is the builder for creating a LineItem entity.
type LineItemCreate struct {
	config
	mutation *LineItemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (lic *LineItemCreate) SetName(s string) *LineItemCreate {
	lic.mutation.SetName(s)
	return lic
}

// SetPrice sets the "price" field.
func (lic *LineItemCreate) SetPrice(i int64) *LineItemCreate {
	lic.mutation.SetPrice(i)
	return lic
}

// SetQuantity sets the "quantity" field.
func (lic *LineItemCreate) SetQuantity(i int64) *LineItemCreate {
	lic.mutation.SetQuantity(i)
	return lic
}

// SetAddedAt sets the "added_at" field.
func (lic *LineItemCreate) SetAddedAt(t time.Time) *LineItemCreate {
	lic.mutation.SetAddedAt(t)
	return lic
}

// SetNillableAddedAt sets the "added_at" field if the given value is not nil.
func (lic *LineItemCreate) SetNillableAddedAt(t *time.Time) *LineItemCreate {
	if t != nil {
		lic.SetAddedAt(*t)
	}
	return lic
}

// SetID sets the "id" field.
func (lic *LineItemCreate) SetID(u uuid.UUID) *LineItemCreate {
	lic.mutation.SetID(u)
	return lic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lic *LineItemCreate) SetNillableID(u *uuid.UUID) *LineItemCreate {
	if u != nil {
		lic.SetID(*u)
	}
	return lic
}

// SetOwnerID sets the "owner" edge to the Bill entity by ID.
func (lic *LineItemCreate) SetOwnerID(id uuid.UUID) *LineItemCreate {
	lic.mutation.SetOwnerID(id)
	return lic
}

// SetNillableOwnerID sets the "owner" edge to the Bill entity by ID if the given value is not nil.
func (lic *LineItemCreate) SetNillableOwnerID(id *uuid.UUID) *LineItemCreate {
	if id != nil {
		lic = lic.SetOwnerID(*id)
	}
	return lic
}

// SetOwner sets the "owner" edge to the Bill entity.
func (lic *LineItemCreate) SetOwner(b *Bill) *LineItemCreate {
	return lic.SetOwnerID(b.ID)
}

// Mutation returns the LineItemMutation object of the builder.
func (lic *LineItemCreate) Mutation() *LineItemMutation {
	return lic.mutation
}

// Save creates the LineItem in the database.
func (lic *LineItemCreate) Save(ctx context.Context) (*LineItem, error) {
	lic.defaults()
	return withHooks(ctx, lic.sqlSave, lic.mutation, lic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lic *LineItemCreate) SaveX(ctx context.Context) *LineItem {
	v, err := lic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lic *LineItemCreate) Exec(ctx context.Context) error {
	_, err := lic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lic *LineItemCreate) ExecX(ctx context.Context) {
	if err := lic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lic *LineItemCreate) defaults() {
	if _, ok := lic.mutation.AddedAt(); !ok {
		v := lineitem.DefaultAddedAt()
		lic.mutation.SetAddedAt(v)
	}
	if _, ok := lic.mutation.ID(); !ok {
		v := lineitem.DefaultID()
		lic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lic *LineItemCreate) check() error {
	if _, ok := lic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entity: missing required field "LineItem.name"`)}
	}
	if v, ok := lic.mutation.Name(); ok {
		if err := lineitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entity: validator failed for field "LineItem.name": %w`, err)}
		}
	}
	if _, ok := lic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`entity: missing required field "LineItem.price"`)}
	}
	if v, ok := lic.mutation.Price(); ok {
		if err := lineitem.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`entity: validator failed for field "LineItem.price": %w`, err)}
		}
	}
	if _, ok := lic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`entity: missing required field "LineItem.quantity"`)}
	}
	if v, ok := lic.mutation.Quantity(); ok {
		if err := lineitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`entity: validator failed for field "LineItem.quantity": %w`, err)}
		}
	}
	if _, ok := lic.mutation.AddedAt(); !ok {
		return &ValidationError{Name: "added_at", err: errors.New(`entity: missing required field "LineItem.added_at"`)}
	}
	return nil
}

func (lic *LineItemCreate) sqlSave(ctx context.Context) (*LineItem, error) {
	if err := lic.check(); err != nil {
		return nil, err
	}
	_node, _spec := lic.createSpec()
	if err := sqlgraph.CreateNode(ctx, lic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lic.mutation.id = &_node.ID
	lic.mutation.done = true
	return _node, nil
}

func (lic *LineItemCreate) createSpec() (*LineItem, *sqlgraph.CreateSpec) {
	var (
		_node = &LineItem{config: lic.config}
		_spec = sqlgraph.NewCreateSpec(lineitem.Table, sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID))
	)
	if id, ok := lic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lic.mutation.Name(); ok {
		_spec.SetField(lineitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lic.mutation.Price(); ok {
		_spec.SetField(lineitem.FieldPrice, field.TypeInt64, value)
		_node.Price = value
	}
	if value, ok := lic.mutation.Quantity(); ok {
		_spec.SetField(lineitem.FieldQuantity, field.TypeInt64, value)
		_node.Quantity = value
	}
	if value, ok := lic.mutation.AddedAt(); ok {
		_spec.SetField(lineitem.FieldAddedAt, field.TypeTime, value)
		_node.AddedAt = value
	}
	if nodes := lic.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lineitem.OwnerTable,
			Columns: []string{lineitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bill_line_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LineItemCreateBulk is the builder for creating many LineItem entities in bulk.
type LineItemCreateBulk struct {
	config
	err      error
	builders []*LineItemCreate
}

// Save creates the LineItem entities in the database.
func (licb *LineItemCreateBulk) Save(ctx context.Context) ([]*LineItem, error) {
	if licb.err != nil {
		return nil, licb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(licb.builders))
	nodes := make([]*LineItem, len(licb.builders))
	mutators := make([]Mutator, len(licb.builders))
	for i := range licb.builders {
		func(i int, root context.Context) {
			builder := licb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LineItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, licb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, licb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, licb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (licb *LineItemCreateBulk) SaveX(ctx context.Context) []*LineItem {
	v, err := licb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (licb *LineItemCreateBulk) Exec(ctx context.Context) error {
	_, err := licb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (licb *LineItemCreateBulk) ExecX(ctx context.Context) {
	if err := licb.Exec(ctx); err != nil {
		panic(err)
	}
}
