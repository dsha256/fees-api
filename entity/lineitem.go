// Code generated by ent, DO NOT EDIT.

package entity

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dsha256/feesapi/entity/bill"
	"github.com/dsha256/feesapi/entity/lineitem"
	"github.com/google/uuid"
)

// LineItem is the model entity for the LineItem schema.
type LineItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price int64 `json:"price,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int64 `json:"quantity,omitempty"`
	// AddedAt holds the value of the "added_at" field.
	AddedAt time.Time `json:"added_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LineItemQuery when eager-loading is set.
	Edges           LineItemEdges `json:"edges"`
	bill_line_items *uuid.UUID
	selectValues    sql.SelectValues
}

// LineItemEdges holds the relations/edges for other nodes in the graph.
type LineItemEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Bill `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LineItemEdges) OwnerOrErr() (*Bill, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: bill.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LineItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lineitem.FieldPrice, lineitem.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case lineitem.FieldName:
			values[i] = new(sql.NullString)
		case lineitem.FieldAddedAt:
			values[i] = new(sql.NullTime)
		case lineitem.FieldID:
			values[i] = new(uuid.UUID)
		case lineitem.ForeignKeys[0]: // bill_line_items
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LineItem fields.
func (li *LineItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lineitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				li.ID = *value
			}
		case lineitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				li.Name = value.String
			}
		case lineitem.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				li.Price = value.Int64
			}
		case lineitem.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				li.Quantity = value.Int64
			}
		case lineitem.FieldAddedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field added_at", values[i])
			} else if value.Valid {
				li.AddedAt = value.Time
			}
		case lineitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field bill_line_items", values[i])
			} else if value.Valid {
				li.bill_line_items = new(uuid.UUID)
				*li.bill_line_items = *value.S.(*uuid.UUID)
			}
		default:
			li.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LineItem.
// This includes values selected through modifiers, order, etc.
func (li *LineItem) Value(name string) (ent.Value, error) {
	return li.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the LineItem entity.
func (li *LineItem) QueryOwner() *BillQuery {
	return NewLineItemClient(li.config).QueryOwner(li)
}

// Update returns a builder for updating this LineItem.
// Note that you need to call LineItem.Unwrap() before calling this method if this LineItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (li *LineItem) Update() *LineItemUpdateOne {
	return NewLineItemClient(li.config).UpdateOne(li)
}

// Unwrap unwraps the LineItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (li *LineItem) Unwrap() *LineItem {
	_tx, ok := li.config.driver.(*txDriver)
	if !ok {
		panic("entity: LineItem is not a transactional entity")
	}
	li.config.driver = _tx.drv
	return li
}

// String implements the fmt.Stringer.
func (li *LineItem) String() string {
	var builder strings.Builder
	builder.WriteString("LineItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", li.ID))
	builder.WriteString("name=")
	builder.WriteString(li.Name)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", li.Price))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", li.Quantity))
	builder.WriteString(", ")
	builder.WriteString("added_at=")
	builder.WriteString(li.AddedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LineItems is a parsable slice of LineItem.
type LineItems []*LineItem
