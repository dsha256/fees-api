// Code generated by ent, DO NOT EDIT.

package entity

import (
	"time"

	"github.com/dsha256/feesapi/entity/bill"
	"github.com/dsha256/feesapi/entity/lineitem"
	"github.com/dsha256/feesapi/entity/schema"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	billFields := schema.Bill{}.Fields()
	_ = billFields
	// billDescTotal is the schema descriptor for total field.
	billDescTotal := billFields[2].Descriptor()
	// bill.DefaultTotal holds the default value on creation for the total field.
	bill.DefaultTotal = billDescTotal.Default.(int64)
	// billDescIsOpen is the schema descriptor for is_open field.
	billDescIsOpen := billFields[3].Descriptor()
	// bill.DefaultIsOpen holds the default value on creation for the is_open field.
	bill.DefaultIsOpen = billDescIsOpen.Default.(bool)
	// billDescClosedAt is the schema descriptor for closed_at field.
	billDescClosedAt := billFields[4].Descriptor()
	// bill.DefaultClosedAt holds the default value on creation for the closed_at field.
	bill.DefaultClosedAt = billDescClosedAt.Default.(func() time.Time)
	// billDescCreatedAt is the schema descriptor for created_at field.
	billDescCreatedAt := billFields[5].Descriptor()
	// bill.DefaultCreatedAt holds the default value on creation for the created_at field.
	bill.DefaultCreatedAt = billDescCreatedAt.Default.(func() time.Time)
	// billDescID is the schema descriptor for id field.
	billDescID := billFields[0].Descriptor()
	// bill.DefaultID holds the default value on creation for the id field.
	bill.DefaultID = billDescID.Default.(func() uuid.UUID)
	lineitemFields := schema.LineItem{}.Fields()
	_ = lineitemFields
	// lineitemDescName is the schema descriptor for name field.
	lineitemDescName := lineitemFields[1].Descriptor()
	// lineitem.NameValidator is a validator for the "name" field. It is called by the builders before save.
	lineitem.NameValidator = func() func(string) error {
		validators := lineitemDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// lineitemDescPrice is the schema descriptor for price field.
	lineitemDescPrice := lineitemFields[2].Descriptor()
	// lineitem.PriceValidator is a validator for the "price" field. It is called by the builders before save.
	lineitem.PriceValidator = lineitemDescPrice.Validators[0].(func(int64) error)
	// lineitemDescQuantity is the schema descriptor for quantity field.
	lineitemDescQuantity := lineitemFields[3].Descriptor()
	// lineitem.QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	lineitem.QuantityValidator = lineitemDescQuantity.Validators[0].(func(int64) error)
	// lineitemDescAddedAt is the schema descriptor for added_at field.
	lineitemDescAddedAt := lineitemFields[4].Descriptor()
	// lineitem.DefaultAddedAt holds the default value on creation for the added_at field.
	lineitem.DefaultAddedAt = lineitemDescAddedAt.Default.(func() time.Time)
	// lineitemDescID is the schema descriptor for id field.
	lineitemDescID := lineitemFields[0].Descriptor()
	// lineitem.DefaultID holds the default value on creation for the id field.
	lineitem.DefaultID = lineitemDescID.Default.(func() uuid.UUID)
}
