// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/dsha256/feesapi/entity/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dsha256/feesapi/entity/bill"
	"github.com/dsha256/feesapi/entity/lineitem"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bill is the client for interacting with the Bill builders.
	Bill *BillClient
	// LineItem is the client for interacting with the LineItem builders.
	LineItem *LineItemClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bill = NewBillClient(c.config)
	c.LineItem = NewLineItemClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("entity: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("entity: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Bill:     NewBillClient(cfg),
		LineItem: NewLineItemClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Bill:     NewBillClient(cfg),
		LineItem: NewLineItemClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bill.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Bill.Use(hooks...)
	c.LineItem.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Bill.Intercept(interceptors...)
	c.LineItem.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BillMutation:
		return c.Bill.mutate(ctx, m)
	case *LineItemMutation:
		return c.LineItem.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("entity: unknown mutation type %T", m)
	}
}

// BillClient is a client for the Bill schema.
type BillClient struct {
	config
}

// NewBillClient returns a client for the Bill from the given config.
func NewBillClient(c config) *BillClient {
	return &BillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bill.Hooks(f(g(h())))`.
func (c *BillClient) Use(hooks ...Hook) {
	c.hooks.Bill = append(c.hooks.Bill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bill.Intercept(f(g(h())))`.
func (c *BillClient) Intercept(interceptors ...Interceptor) {
	c.inters.Bill = append(c.inters.Bill, interceptors...)
}

// Create returns a builder for creating a Bill entity.
func (c *BillClient) Create() *BillCreate {
	mutation := newBillMutation(c.config, OpCreate)
	return &BillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bill entities.
func (c *BillClient) CreateBulk(builders ...*BillCreate) *BillCreateBulk {
	return &BillCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillClient) MapCreateBulk(slice any, setFunc func(*BillCreate, int)) *BillCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillCreateBulk{err: fmt.Errorf("calling to BillClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bill.
func (c *BillClient) Update() *BillUpdate {
	mutation := newBillMutation(c.config, OpUpdate)
	return &BillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillClient) UpdateOne(b *Bill) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBill(b))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillClient) UpdateOneID(id string) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBillID(id))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bill.
func (c *BillClient) Delete() *BillDelete {
	mutation := newBillMutation(c.config, OpDelete)
	return &BillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillClient) DeleteOne(b *Bill) *BillDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillClient) DeleteOneID(id string) *BillDeleteOne {
	builder := c.Delete().Where(bill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillDeleteOne{builder}
}

// Query returns a query builder for Bill.
func (c *BillClient) Query() *BillQuery {
	return &BillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBill},
		inters: c.Interceptors(),
	}
}

// Get returns a Bill entity by its id.
func (c *BillClient) Get(ctx context.Context, id string) (*Bill, error) {
	return c.Query().Where(bill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillClient) GetX(ctx context.Context, id string) *Bill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLineItems queries the line_items edge of a Bill.
func (c *BillClient) QueryLineItems(b *Bill) *LineItemQuery {
	query := (&LineItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(lineitem.Table, lineitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bill.LineItemsTable, bill.LineItemsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillClient) Hooks() []Hook {
	return c.hooks.Bill
}

// Interceptors returns the client interceptors.
func (c *BillClient) Interceptors() []Interceptor {
	return c.inters.Bill
}

func (c *BillClient) mutate(ctx context.Context, m *BillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entity: unknown Bill mutation op: %q", m.Op())
	}
}

// LineItemClient is a client for the LineItem schema.
type LineItemClient struct {
	config
}

// NewLineItemClient returns a client for the LineItem from the given config.
func NewLineItemClient(c config) *LineItemClient {
	return &LineItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lineitem.Hooks(f(g(h())))`.
func (c *LineItemClient) Use(hooks ...Hook) {
	c.hooks.LineItem = append(c.hooks.LineItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lineitem.Intercept(f(g(h())))`.
func (c *LineItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.LineItem = append(c.inters.LineItem, interceptors...)
}

// Create returns a builder for creating a LineItem entity.
func (c *LineItemClient) Create() *LineItemCreate {
	mutation := newLineItemMutation(c.config, OpCreate)
	return &LineItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LineItem entities.
func (c *LineItemClient) CreateBulk(builders ...*LineItemCreate) *LineItemCreateBulk {
	return &LineItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LineItemClient) MapCreateBulk(slice any, setFunc func(*LineItemCreate, int)) *LineItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LineItemCreateBulk{err: fmt.Errorf("calling to LineItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LineItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LineItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LineItem.
func (c *LineItemClient) Update() *LineItemUpdate {
	mutation := newLineItemMutation(c.config, OpUpdate)
	return &LineItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LineItemClient) UpdateOne(li *LineItem) *LineItemUpdateOne {
	mutation := newLineItemMutation(c.config, OpUpdateOne, withLineItem(li))
	return &LineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LineItemClient) UpdateOneID(id uuid.UUID) *LineItemUpdateOne {
	mutation := newLineItemMutation(c.config, OpUpdateOne, withLineItemID(id))
	return &LineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LineItem.
func (c *LineItemClient) Delete() *LineItemDelete {
	mutation := newLineItemMutation(c.config, OpDelete)
	return &LineItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LineItemClient) DeleteOne(li *LineItem) *LineItemDeleteOne {
	return c.DeleteOneID(li.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LineItemClient) DeleteOneID(id uuid.UUID) *LineItemDeleteOne {
	builder := c.Delete().Where(lineitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LineItemDeleteOne{builder}
}

// Query returns a query builder for LineItem.
func (c *LineItemClient) Query() *LineItemQuery {
	return &LineItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLineItem},
		inters: c.Interceptors(),
	}
}

// Get returns a LineItem entity by its id.
func (c *LineItemClient) Get(ctx context.Context, id uuid.UUID) (*LineItem, error) {
	return c.Query().Where(lineitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LineItemClient) GetX(ctx context.Context, id uuid.UUID) *LineItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a LineItem.
func (c *LineItemClient) QueryOwner(li *LineItem) *BillQuery {
	query := (&BillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := li.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lineitem.Table, lineitem.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lineitem.OwnerTable, lineitem.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(li.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LineItemClient) Hooks() []Hook {
	return c.hooks.LineItem
}

// Interceptors returns the client interceptors.
func (c *LineItemClient) Interceptors() []Interceptor {
	return c.inters.LineItem
}

func (c *LineItemClient) mutate(ctx context.Context, m *LineItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LineItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LineItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LineItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entity: unknown LineItem mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Bill, LineItem []ent.Hook
	}
	inters struct {
		Bill, LineItem []ent.Interceptor
	}
)
