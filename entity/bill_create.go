// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dsha256/feesapi/entity/bill"
	"github.com/dsha256/feesapi/entity/lineitem"
	"github.com/google/uuid"
)

// BillCreate is the builder for creating a Bill entity.
type BillCreate struct {
	config
	mutation *BillMutation
	hooks    []Hook
}

// SetCurrency sets the "currency" field.
func (bc *BillCreate) SetCurrency(b bill.Currency) *BillCreate {
	bc.mutation.SetCurrency(b)
	return bc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (bc *BillCreate) SetNillableCurrency(b *bill.Currency) *BillCreate {
	if b != nil {
		bc.SetCurrency(*b)
	}
	return bc
}

// SetTotal sets the "total" field.
func (bc *BillCreate) SetTotal(i int64) *BillCreate {
	bc.mutation.SetTotal(i)
	return bc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (bc *BillCreate) SetNillableTotal(i *int64) *BillCreate {
	if i != nil {
		bc.SetTotal(*i)
	}
	return bc
}

// SetIsOpen sets the "is_open" field.
func (bc *BillCreate) SetIsOpen(b bool) *BillCreate {
	bc.mutation.SetIsOpen(b)
	return bc
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (bc *BillCreate) SetNillableIsOpen(b *bool) *BillCreate {
	if b != nil {
		bc.SetIsOpen(*b)
	}
	return bc
}

// SetClosedAt sets the "closed_at" field.
func (bc *BillCreate) SetClosedAt(t time.Time) *BillCreate {
	bc.mutation.SetClosedAt(t)
	return bc
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (bc *BillCreate) SetNillableClosedAt(t *time.Time) *BillCreate {
	if t != nil {
		bc.SetClosedAt(*t)
	}
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BillCreate) SetCreatedAt(t time.Time) *BillCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BillCreate) SetNillableCreatedAt(t *time.Time) *BillCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BillCreate) SetID(u uuid.UUID) *BillCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BillCreate) SetNillableID(u *uuid.UUID) *BillCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// AddLineItemIDs adds the "line_items" edge to the LineItem entity by IDs.
func (bc *BillCreate) AddLineItemIDs(ids ...uuid.UUID) *BillCreate {
	bc.mutation.AddLineItemIDs(ids...)
	return bc
}

// AddLineItems adds the "line_items" edges to the LineItem entity.
func (bc *BillCreate) AddLineItems(l ...*LineItem) *BillCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return bc.AddLineItemIDs(ids...)
}

// Mutation returns the BillMutation object of the builder.
func (bc *BillCreate) Mutation() *BillMutation {
	return bc.mutation
}

// Save creates the Bill in the database.
func (bc *BillCreate) Save(ctx context.Context) (*Bill, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BillCreate) SaveX(ctx context.Context) *Bill {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BillCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BillCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BillCreate) defaults() {
	if _, ok := bc.mutation.Currency(); !ok {
		v := bill.DefaultCurrency
		bc.mutation.SetCurrency(v)
	}
	if _, ok := bc.mutation.Total(); !ok {
		v := bill.DefaultTotal
		bc.mutation.SetTotal(v)
	}
	if _, ok := bc.mutation.IsOpen(); !ok {
		v := bill.DefaultIsOpen
		bc.mutation.SetIsOpen(v)
	}
	if _, ok := bc.mutation.ClosedAt(); !ok {
		v := bill.DefaultClosedAt()
		bc.mutation.SetClosedAt(v)
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bill.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bill.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BillCreate) check() error {
	if _, ok := bc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`entity: missing required field "Bill.currency"`)}
	}
	if v, ok := bc.mutation.Currency(); ok {
		if err := bill.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`entity: validator failed for field "Bill.currency": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`entity: missing required field "Bill.total"`)}
	}
	if _, ok := bc.mutation.IsOpen(); !ok {
		return &ValidationError{Name: "is_open", err: errors.New(`entity: missing required field "Bill.is_open"`)}
	}
	if _, ok := bc.mutation.ClosedAt(); !ok {
		return &ValidationError{Name: "closed_at", err: errors.New(`entity: missing required field "Bill.closed_at"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entity: missing required field "Bill.created_at"`)}
	}
	return nil
}

func (bc *BillCreate) sqlSave(ctx context.Context) (*Bill, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BillCreate) createSpec() (*Bill, *sqlgraph.CreateSpec) {
	var (
		_node = &Bill{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bill.Table, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.Currency(); ok {
		_spec.SetField(bill.FieldCurrency, field.TypeEnum, value)
		_node.Currency = value
	}
	if value, ok := bc.mutation.Total(); ok {
		_spec.SetField(bill.FieldTotal, field.TypeInt64, value)
		_node.Total = value
	}
	if value, ok := bc.mutation.IsOpen(); ok {
		_spec.SetField(bill.FieldIsOpen, field.TypeBool, value)
		_node.IsOpen = value
	}
	if value, ok := bc.mutation.ClosedAt(); ok {
		_spec.SetField(bill.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bill.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := bc.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bill.LineItemsTable,
			Columns: []string{bill.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lineitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BillCreateBulk is the builder for creating many Bill entities in bulk.
type BillCreateBulk struct {
	config
	err      error
	builders []*BillCreate
}

// Save creates the Bill entities in the database.
func (bcb *BillCreateBulk) Save(ctx context.Context) ([]*Bill, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bill, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BillCreateBulk) SaveX(ctx context.Context) []*Bill {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BillCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BillCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
